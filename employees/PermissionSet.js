/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");
var base_Reference = require("../base/Reference");
var employees_Permissions = require("../employees/Permissions");

  /**
  * @constructor
  */
  PermissionSet = Class.create( {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function() {
      this._class_ = PermissionSet;
      this.id = undefined;
      this.name = undefined;
      this.label = undefined;
      this.app = undefined;
      this.employeeDefault = undefined;
      this.managerDefault = undefined;
      this.permissions = undefined;
      this.roles = undefined;
    },

    /**
    * Set the field value
    * Unique identifier
    *
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Unique identifier
      * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * Key of the permissionSet
    *
    * @param {String} name 
    */
    setName: function(name) {
      this.name = name;
    },

    /**
    * Get the field value
    * Key of the permissionSet
      * @return {String} 
    */
    getName: function() {
      return this.name;
    },

    /**
    * Set the field value
    * Label of the permissionSet
    *
    * @param {String} label 
    */
    setLabel: function(label) {
      this.label = label;
    },

    /**
    * Get the field value
    * Label of the permissionSet
      * @return {String} 
    */
    getLabel: function() {
      return this.label;
    },

    /**
    * Set the field value
    * @param {Reference} app 
    */
    setApp: function(app) {
      this.app = app;
    },

    /**
    * Get the field value
    * @return {Reference} 
    */
    getApp: function() {
      return this.app;
    },

    /**
    * Set the field value
    * @param {Boolean} employeeDefault 
    */
    setEmployeeDefault: function(employeeDefault) {
      this.employeeDefault = employeeDefault;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getEmployeeDefault: function() {
      return this.employeeDefault;
    },

    /**
    * Set the field value
    * @param {Boolean} managerDefault 
    */
    setManagerDefault: function(managerDefault) {
      this.managerDefault = managerDefault;
    },

    /**
    * Get the field value
    * @return {Boolean} 
    */
    getManagerDefault: function() {
      return this.managerDefault;
    },

    /**
    * Set the field value
    * Bitmap of permissions
    *
    * @param {Permissions} permissions 
    */
    setPermissions: function(permissions) {
      this.permissions = permissions;
    },

    /**
    * Get the field value
    * Bitmap of permissions
      * @return {Permissions} 
    */
    getPermissions: function() {
      return this.permissions;
    },

    /**
    * Set the field value
    * roles enabled for this merchant
    *
    * @param {Array.<Reference>} roles An array of 
    */
    setRoles: function(roles) {
      this.roles = roles;
    },

    /**
    * Get the field value
    * roles enabled for this merchant
      * @return {Array.<Reference>} An array of 
    */
    getRoles: function() {
      return this.roles;
    },
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

PermissionSet._meta_ =  {fields:  {}};
PermissionSet._meta_.fields["id"] = {};
PermissionSet._meta_.fields["id"].type = String;
PermissionSet._meta_.fields["name"] = {};
PermissionSet._meta_.fields["name"].type = String;
PermissionSet._meta_.fields["label"] = {};
PermissionSet._meta_.fields["label"].type = String;
PermissionSet._meta_.fields["app"] = {};
PermissionSet._meta_.fields["app"].type = base_Reference;
PermissionSet._meta_.fields["employeeDefault"] = {};
PermissionSet._meta_.fields["employeeDefault"].type = Boolean;
PermissionSet._meta_.fields["managerDefault"] = {};
PermissionSet._meta_.fields["managerDefault"].type = Boolean;
PermissionSet._meta_.fields["permissions"] = {};
PermissionSet._meta_.fields["permissions"].type = employees_Permissions;
PermissionSet._meta_.fields["roles"] = {};
PermissionSet._meta_.fields["roles"].type = Array;
PermissionSet._meta_.fields["roles"].elementType = base_Reference;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = PermissionSet;
}

