/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */

// Prototype.js required
require("prototype");
var employees_Employee = require("../employees/Employee");

  /**
  * @constructor
  */
  Shift = Class.create( {
    /**
    * Initialize the values for this.
    * @private
    */
    initialize: function() {
      this._class_ = Shift;
      this.id = undefined;
      this.employee = undefined;
      this.cashTipsCollected = undefined;
      this.serverBanking = undefined;
      this.inTime = undefined;
      this.overrideInTime = undefined;
      this.overrideInEmployee = undefined;
      this.outTime = undefined;
      this.overrideOutTime = undefined;
      this.overrideOutEmployee = undefined;
    },

    /**
    * Set the field value
    * Unique identifier
    *
    * @param {String} id 
    */
    setId: function(id) {
      this.id = id;
    },

    /**
    * Get the field value
    * Unique identifier
      * @return {String} 
    */
    getId: function() {
      return this.id;
    },

    /**
    * Set the field value
    * The employee that worked this shift
    *
    * @param {Employee} employee 
    */
    setEmployee: function(employee) {
      this.employee = employee;
    },

    /**
    * Get the field value
    * The employee that worked this shift
      * @return {Employee} 
    */
    getEmployee: function() {
      return this.employee;
    },

    /**
    * Set the field value
    * Amount of cash tips collected
    *
    * @param {Number} cashTipsCollected must be a long integer
    */
    setCashTipsCollected: function(cashTipsCollected) {
      this.cashTipsCollected = cashTipsCollected;
    },

    /**
    * Get the field value
    * Amount of cash tips collected
      * @return {Number} must be a long integer
    */
    getCashTipsCollected: function() {
      return this.cashTipsCollected;
    },

    /**
    * Set the field value
    * Whether the employee used server banking
    *
    * @param {Boolean} serverBanking 
    */
    setServerBanking: function(serverBanking) {
      this.serverBanking = serverBanking;
    },

    /**
    * Get the field value
    * Whether the employee used server banking
      * @return {Boolean} 
    */
    getServerBanking: function() {
      return this.serverBanking;
    },

    /**
    * Set the field value
    * Clock in time
    *
    * @param {Number} inTime must be a long integer
    */
    setInTime: function(inTime) {
      this.inTime = inTime;
    },

    /**
    * Get the field value
    * Clock in time
      * @return {Number} must be a long integer
    */
    getInTime: function() {
      return this.inTime;
    },

    /**
    * Set the field value
    * Overridden clock in time
    *
    * @param {Number} overrideInTime must be a long integer
    */
    setOverrideInTime: function(overrideInTime) {
      this.overrideInTime = overrideInTime;
    },

    /**
    * Get the field value
    * Overridden clock in time
      * @return {Number} must be a long integer
    */
    getOverrideInTime: function() {
      return this.overrideInTime;
    },

    /**
    * Set the field value
    * The employee who overrode the clock in time
    *
    * @param {Employee} overrideInEmployee 
    */
    setOverrideInEmployee: function(overrideInEmployee) {
      this.overrideInEmployee = overrideInEmployee;
    },

    /**
    * Get the field value
    * The employee who overrode the clock in time
      * @return {Employee} 
    */
    getOverrideInEmployee: function() {
      return this.overrideInEmployee;
    },

    /**
    * Set the field value
    * Clock out time
    *
    * @param {Number} outTime must be a long integer
    */
    setOutTime: function(outTime) {
      this.outTime = outTime;
    },

    /**
    * Get the field value
    * Clock out time
      * @return {Number} must be a long integer
    */
    getOutTime: function() {
      return this.outTime;
    },

    /**
    * Set the field value
    * Overridden clock out time
    *
    * @param {Number} overrideOutTime must be a long integer
    */
    setOverrideOutTime: function(overrideOutTime) {
      this.overrideOutTime = overrideOutTime;
    },

    /**
    * Get the field value
    * Overridden clock out time
      * @return {Number} must be a long integer
    */
    getOverrideOutTime: function() {
      return this.overrideOutTime;
    },

    /**
    * Set the field value
    * The employee who overrode the clock out time
    *
    * @param {Employee} overrideOutEmployee 
    */
    setOverrideOutEmployee: function(overrideOutEmployee) {
      this.overrideOutEmployee = overrideOutEmployee;
    },

    /**
    * Get the field value
    * The employee who overrode the clock out time
      * @return {Employee} 
    */
    getOverrideOutEmployee: function() {
      return this.overrideOutEmployee;
    },
    getMetaInfo: function(fieldName) {
      var curclass = this._class_;
      do {
        var fieldMetaInfo = curclass._meta_.fields[fieldName];
        if(fieldMetaInfo) {
          return fieldMetaInfo;
        }
        curclass = curclass.superclass;
      } while(curclass);
      return null;
    },

    toString: function() {
      return JSON.stringify(this);
    }

  });

Shift._meta_ =  {fields:  {}};
Shift._meta_.fields["id"] = {};
Shift._meta_.fields["id"].type = String;
Shift._meta_.fields["employee"] = {};
Shift._meta_.fields["employee"].type = employees_Employee;
Shift._meta_.fields["cashTipsCollected"] = {};
Shift._meta_.fields["cashTipsCollected"].type = Number;
Shift._meta_.fields["serverBanking"] = {};
Shift._meta_.fields["serverBanking"].type = Boolean;
Shift._meta_.fields["inTime"] = {};
Shift._meta_.fields["inTime"].type = Number;
Shift._meta_.fields["overrideInTime"] = {};
Shift._meta_.fields["overrideInTime"].type = Number;
Shift._meta_.fields["overrideInEmployee"] = {};
Shift._meta_.fields["overrideInEmployee"].type = employees_Employee;
Shift._meta_.fields["outTime"] = {};
Shift._meta_.fields["outTime"].type = Number;
Shift._meta_.fields["overrideOutTime"] = {};
Shift._meta_.fields["overrideOutTime"].type = Number;
Shift._meta_.fields["overrideOutEmployee"] = {};
Shift._meta_.fields["overrideOutEmployee"].type = employees_Employee;

//
// Expose the module.
//
if ('undefined' !== typeof module) {
module.exports = Shift;
}

